# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,cache = TRUE,error=TRUE)
set.seed(718453)
# Chunk 2
load("MCF7Data.RData")
fingerprintMat <- fingerprintMat*1 # convert logical matrix to binary integer matrix
head(fingerprintMat[,1:4])
# Chunk 3
tanimoto = function(m){
S = matrix(0,nrow=dim(m)[1],ncol=dim(m)[1])
m=as.matrix(m)
N.C=m %*% t(m)
N.A=m %*% (1-t(m))
N.B=(1-m) %*% t(m)
S=N.C/(N.A+N.B+N.C)
D = 1 - S
return(D)
}
dist.fingerprintMat <- tanimoto(fingerprintMat)
head(dist.fingerprintMat[,1:4])
# alternative in base r?
# test.dist.fingerprintMat <- as.matrix(dist(fingerprintMat,method = 'binary'))
# test.dist.fingerprintMat == dist.fingerprintMat
# Chunk 4
### Base R method:
# cluster.fingerprintMat <- hclust(as.dist(dist.fingerprintMat), method = "average")
# plot(cluster.fingerprintMat,main='Hierarchical clustering of compounds based on their chemical fingerprints',hang=-1,col = "#487AA1", col.main = "#F38630", col.lab = "#F38630", col.axis = "#7C8071",xlab="Compounds",sub="", lwd = 2)
# axis(side = 2, at = seq(0, 400, 100), col = "#F38630", labels = TRUE, lwd = 2)
library(cluster)
cluster.a.fingerprintMat <- agnes(as.dist(dist.fingerprintMat),method = "average")
# plot(cluster.a.fingerprintMat,which.plots = 2)
pltree(cluster.a.fingerprintMat,main='Hierarchical clustering of compounds based on their chemical fingerprints',col = "#487AA1", col.main = "#F38630", col.lab = "#F38630", col.axis = "#7C8071",xlab="Compounds",sub="", lwd = 2) # calls as.hclust plot method (,hang=-1)
axis(side = 2, at = seq(0, 400, 100), col = "#F38630", labels = TRUE, lwd = 2)
# Chunk 5
FUNcluster = function(x,k,inputcluster){
# Function that requires the original observations (x),
# the number of desired clusters (k),
# and a cluster object
out = list( cluster = cutree(inputcluster,k=k))
return(out)
}
gap <- clusGap(fingerprintMat,FUNcluster = FUNcluster,inputcluster=cluster.a.fingerprintMat,K.max = 20,B = 500)
plot(gap)
gapdata <- as.data.frame(gap$Tab)
maxSE(gapdata[,3],gapdata[,4],"Tibs2001SEmax")
# Chunk 7
cluster.fingerprintMat <- agnes(as.dist(dist.fingerprintMat),method = "flexible",par.method = 0.625)
pltree(cluster.fingerprintMat,main='Hierarchical clustering of compounds based on their chemical fingerprints',col = "#487AA1", col.main = "#F38630", col.lab = "#F38630", col.axis = "#7C8071",xlab="Compounds",sub="", lwd = 2) # calls as.hclust plot method
axis(side = 2, at = seq(0, 400, 100), col = "#F38630", labels = TRUE, lwd = 2)
gap <- clusGap(fingerprintMat,FUNcluster = FUNcluster,inputcluster=cluster.fingerprintMat,K.max = 20,B = 500)
plot(gap)
gapdata <- as.data.frame(gap$Tab)
k.fingerprint <- maxSE(gapdata[,3],gapdata[,4],"Tibs2001SEmax")
k.fingerprint
# Chunk 8
pltree(cluster.fingerprintMat,main='Hierarchical clustering of compounds based on their chemical fingerprints',hang=-1,col = "#487AA1", col.main = "#F38630", col.lab = "#F38630", col.axis = "#7C8071",xlab="Compounds",sub="", lwd = 2) # calls as.hclust plot method
axis(side = 2, at = seq(0, 400, 100), col = "#F38630", labels = TRUE, lwd = 2)
rect.hclust(cluster.fingerprintMat,k=k.fingerprint)
# Chunk 9
cut.cluster.fingerprintMat <- cutree(cluster.fingerprintMat,k=k.fingerprint) # get vector with cluster membership for compounds
sapply(unique(cut.cluster.fingerprintMat), function(x) colnames(geneMat)[cut.cluster.fingerprintMat==x])
# Chunk 10
dist.targetMat <- tanimoto(targetMat)
cluster.targetMat <- agnes(as.dist(dist.targetMat),method = "flexible",par.method = 0.625)
gap <- clusGap(targetMat,FUNcluster = FUNcluster,inputcluster=cluster.targetMat,K.max = 20,B = 500)
plot(gap)
gapdata <- as.data.frame(gap$Tab)
k.target <- maxSE(gapdata[,3],gapdata[,4],"Tibs2001SEmax")
pltree(cluster.targetMat,main='Hierarchical clustering of compounds based on their target predictions',col = "#487AA1", col.main = "#F38630", col.lab = "#F38630", col.axis = "#7C8071",xlab="Compounds",sub="", lwd = 2) # calls as.hclust plot method
rect.hclust(cluster.targetMat,k=k.target)
# Chunk 11
cut.cluster.targetMat <- cutree(cluster.targetMat,k=k.target)
sapply(unique(cut.cluster.targetMat), function(x) colnames(geneMat)[cut.cluster.targetMat==x])
# Chunk 12
colnames(geneMat)[cut.cluster.fingerprintMat == 1]
# Chunk 13
refMat <- geneMat[,cut.cluster.fingerprintMat==1][,-c(1)]
querMat <- geneMat[,cut.cluster.fingerprintMat==1]
colnames(refMat)
colnames(querMat)
# Chunk 14
library(CSFA)
# MFA.fingerprint <- CSanalysis(refMat, querMat,"CSmfa",which = c(1:7))
# 2 = principal components for reference compounds
# 3 = factor scores for genes (1vs2) + compound loadings (1v2)
# 4 = factor scores for genes (pc1) interactive
# 5 = compound loadings (pc1)
# 6 = interactive (crash?)
# 7 = CS rank score
factor1.out_MFA <-  CSanalysis(refMat, querMat,"CSmfa",which=c(2,3),factor.plot=1,plot.type='sweave')
# Chunk 15
factor1.out_MFA@CS$CS.query
# Chunk 16
factor2.out_MFA <-  CSanalysis(refMat, querMat,"CSmfa",which=c(),factor.plot=2,plot.type='sweave')
# Chunk 17
factor2.out_MFA@CS$CS.query
# Chunk 18: fingerprint_within_MFA_loop
n.cluster.fingerprint <- unique(cut.cluster.fingerprintMat) # number of clusters
connectivity.fingerprint <- lapply(n.cluster.fingerprint, function(x) sapply(rownames(fingerprintMat[cut.cluster.fingerprintMat==x,,drop=F]),function(y) NULL)) # initialize list to store MFA results
ptm <- proc.time()
for (i in 1:length(connectivity.fingerprint)) { # loop through clusters
cluster.names <- rownames(fingerprintMat[cut.cluster.fingerprintMat==i,,drop=F])
for (j in 1:length(cluster.names)) { # loop through compounds in a cluster
connectivity.fingerprint[[i]][[j]][['refMat']] <- geneMat[,cluster.names[-c(j)]] # reference contains all but j'th compound
connectivity.fingerprint[[i]][[j]][['querMat']] <- geneMat[,cluster.names] # query set contains all compounds in cluster
connectivity.fingerprint[[i]][[j]]['MFA'] <- CSanalysis(connectivity.fingerprint[[i]][[j]][['refMat']],
connectivity.fingerprint[[i]][[j]][['querMat']],
"CSmfa",which=c(),factor.plot=1) # MFA analysis
}
}
proc.time() - ptm
# Chunk 19: fingerprint_pc1
for (j in rownames(fingerprintMat[cut.cluster.fingerprintMat==1,,drop=F])){
print(paste('Query compound is',j))
print(connectivity.fingerprint[[1]][[j]][['MFA']]@CS$CS.query)
}
# Chunk 20: fingerprint_pc2
# b <- connectivity.fingerprint[[1]][[1]][['MFA']]
# a<-CSanalysis(connectivity.fingerprint[[1]][[1]][['refMat']],
#                     connectivity.fingerprint[[1]][[1]][['querMat']],
#                     "CSmfa",factor.plot=2,which=c(2,3),
#                     result.available=connectivity.fingerprint[[1]][[1]][['MFA']],plot.type='sweave')
# b@CS$CS.query
# a@CS$CS.query
# connectivity.fingerprint[[1]][[1]][['MFA']]@CS$CS.query
## Warning in .local(refMat, querMat, type, ...): CS, GS and CSRankScores Slot
## in CSresult will be overwritten due to different factor choice.
redo_MFA_fingerprint_within = function(cluster,compound,factor){
# Plots result for already calculated MFA objects
mfa <- CSanalysis(connectivity.fingerprint[[cluster]][[compound]][['refMat']],
connectivity.fingerprint[[cluster]][[compound]][['querMat']],
"CSmfa",factor.plot=factor,which=c(),
result.available=connectivity.fingerprint[[cluster]][[compound]][['MFA']],
plot.type='sweave')
return(mfa)
}
for (j in rownames(fingerprintMat[cut.cluster.fingerprintMat==1,,drop=F])){
print(paste('Query compound is',j))
print(redo_MFA_fingerprint_within(1,j,2)@CS$CS.query)
}
# Chunk 21: fingerprint_clust1_plots
plot_MFA_fingerprint_within = function(cluster,compound,factor){
# Plots result for already calculated MFA objects
mfa <- CSanalysis(connectivity.fingerprint[[cluster]][[compound]][['refMat']],
connectivity.fingerprint[[cluster]][[compound]][['querMat']],
"CSmfa",factor.plot=factor,which=c(2,3),
result.available=connectivity.fingerprint[[cluster]][[compound]][['MFA']],
plot.type='sweave')
return(mfa)
}
# plot_MFA_fingerprint_within(1,'metformin')
for (j in rownames(fingerprintMat[cut.cluster.fingerprintMat==1,,drop=F])){
print(paste('Query compound is',j))
plot_MFA_fingerprint_within(1,j,1)
}
# Chunk 22: fingerprint_within_MFA_average_connectivity_pc1
average.connectivity.fingerprint.pc1 <- sapply(sapply(connectivity.fingerprint, function(y) sapply(seq_along(y), function(x,n) y[[x]][['MFA']]@CS$CS.query[n[x],] ,n=names(y))), function(z) mean(abs(z)))
plot(average.connectivity.fingerprint.pc1,xlab='Cluster',ylab='Average connectivity score for PC1')
# Chunk 23
test.average.connectivity.fingerprint.pc1 <- abs(sapply(sapply(connectivity.fingerprint, function(y) sapply(seq_along(y), function(x,n) y[[x]][['MFA']]@CS$CS.query[n[x],] ,n=names(y))), mean))
plot(test.average.connectivity.fingerprint.pc1,xlab='Cluster',ylab='Average connectivity score for PC1')
# Chunk 24
colnames(geneMat)[cut.cluster.fingerprintMat == 7]
# Chunk 25: fingerprint_within_MFA_cluster7_plots
for (j in rownames(fingerprintMat[cut.cluster.fingerprintMat==7,,drop=F])){
print(paste('Query compound is',j))
plot_MFA_fingerprint_within(7,j,1)
}
# Chunk 26: fingerprint_within_MFA_average_connectivity_pc2
average.connectivity.fingerprint.pc2 <- sapply(sapply(seq_along(connectivity.fingerprint),
function(y) sapply(seq_along(connectivity.fingerprint[[y]]),
function(x,n) redo_MFA_fingerprint_within(y,n[x],2)@CS$CS.query[n[x],] ,
n=names(connectivity.fingerprint[[y]]))), function(z) mean(abs(z)))
# ## Warning in .local(refMat, querMat, type, ...): CS, GS and CSRankScores Slot
## in CSresult will be overwritten due to different factor choice.
# Chunk 27: fingerprint_within_MFA_average_connectivity_pc2_plot
plot(average.connectivity.fingerprint.pc2,xlab='Cluster',ylab='Average connectivity score')
# Chunk 28: pred_within_MFA
n.cluster.target <- unique(cut.cluster.targetMat) # number of clusters
connectivity.target <- lapply(n.cluster.target, function(x) sapply(rownames(targetMat[cut.cluster.targetMat==x,,drop=F]),function(y) NULL))
# sapply(c('refMat','querMat','MFA'), function(z) NULL) does not work?
ptm <- proc.time()
for (i in 1:length(connectivity.target)) { # loop through clusters
cluster.names <- rownames(targetMat[cut.cluster.targetMat==i,,drop=F])
for (j in 1:length(cluster.names)) { # loop through compounds in a cluster
connectivity.target[[i]][[j]][['refMat']] <- geneMat[,cluster.names[-c(j)]]
connectivity.target[[i]][[j]][['querMat']] <- geneMat[,cluster.names]
connectivity.target[[i]][[j]]['MFA'] <- CSanalysis(connectivity.target[[i]][[j]][['refMat']],
connectivity.target[[i]][[j]][['querMat']],
"CSmfa",which=c(),factor.plot=1)
}
}
proc.time() - ptm
# Chunk 29
colnames(geneMat)[cut.cluster.targetMat == 3]
# Chunk 30: pred_within_MFA_cluster3_pc1_2
for (j in rownames(targetMat[cut.cluster.targetMat==3,,drop=F])){
print(paste('Query compound is',j))
print(connectivity.target[[3]][[j]][['MFA']]@CS$CS.query)
}
redo_MFA_target_within = function(cluster,compound,factor){
# Plots result for already calculated MFA objects
mfa <- CSanalysis(connectivity.target[[cluster]][[compound]][['refMat']],
connectivity.target[[cluster]][[compound]][['querMat']],
"CSmfa",factor.plot=factor,which=c(),
result.available=connectivity.target[[cluster]][[compound]][['MFA']],
plot.type='sweave')
return(mfa)
}
for (j in rownames(targetMat)[cut.cluster.targetMat==3,drop=F]){
print(paste('Query compound is',j))
print(redo_MFA_target_within(3,j,2)@CS$CS.query)
}
# Chunk 31: pred_within_MFA_cluster3_plot
plot_MFA_target_within = function(cluster,compound,factor){
mfa <- CSanalysis(connectivity.target[[cluster]][[compound]][['refMat']],
connectivity.target[[cluster]][[compound]][['querMat']],
"CSmfa",factor.plot=factor,which=c(2,3),
result.available=connectivity.target[[cluster]][[compound]][['MFA']],
plot.type='sweave')
return(mfa)
}
for (j in rownames(targetMat[cut.cluster.targetMat==3,,drop=F])){
print(paste('Query compound is',j))
plot_MFA_target_within(3,j,1)
}
# Chunk 32: target_within_MFA_average_connectivity_pc1
average.connectivity.target.pc1 <- sapply(sapply(connectivity.target, function(y) sapply(seq_along(y), function(x,n) y[[x]][['MFA']]@CS$CS.query[n[x],] ,n=names(y))),  function(z) mean(abs(z)))
plot(average.connectivity.target.pc1,xlab='Cluster',ylab='Average connectivity score for PC1')
# Chunk 33: target_within_MFA_average_connectivity_pc2
average.connectivity.target.pc2 <- sapply(sapply(seq_along(connectivity.target),
function(y) sapply(seq_along(connectivity.target[[y]]),
function(x,n) redo_MFA_target_within(y,n[x],2)@CS$CS.query[n[x],] ,
n=names(connectivity.target[[y]]))),  function(z) mean(abs(z)))
# Chunk 34: target_within_MFA_average_connectivity_pc2_plot
plot(average.connectivity.target.pc2,xlab='Cluster',ylab='Average connectivity score target prediction PC2')
# Chunk 35: between_finger_demo
refMat <- geneMat[,cut.cluster.fingerprintMat==1]
querMat <- geneMat[,cut.cluster.fingerprintMat!=1]
colnames(refMat)
colnames(querMat)
betw.finger.factor1.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(2,3),factor.plot=1,plot.type='sweave')
# Chunk 36: between_finger_demo_loadings
sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])
# Chunk 37: between_finger_demo_loadings_average
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
# Chunk 38: between_finger_demo_loadings_pc2_calc
betw.finger.factor2.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(),factor.plot=2,plot.type='sweave')
# Chunk 39: between_finger_demo_loadings_pc2
sapply(n.cluster.fingerprint, function(y) betw.finger.factor2.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])
# Chunk 40: between_finger_demo_loadings_pc2_average
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor2.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
# Chunk 41: fingerprint_betw_MFA
connectivity.fingerprint.betw <- lapply(n.cluster.fingerprint, function(x) NULL)
ptm <- proc.time()
for (i in 1:length(connectivity.fingerprint.betw)) { # loop through clusters
connectivity.fingerprint.betw[[i]][['refMat']] <- geneMat[,cut.cluster.fingerprintMat==i] # reference contains i'th cluster
connectivity.fingerprint.betw[[i]][['querMat']] <- geneMat[,cut.cluster.fingerprintMat!=i] # query set contains all other clusters
connectivity.fingerprint.betw[[i]][['MFA']] <- CSanalysis(connectivity.fingerprint.betw[[i]][['refMat']],
connectivity.fingerprint.betw[[i]][['querMat']],
"CSmfa",which=c(),factor.plot=1) # MFA analysis
}
proc.time() - ptm
# Chunk 42
plot_MFA_fingerprint_between = function(cluster,factor){
# Plots result for already calculated MFA objects
mfa <- CSanalysis(connectivity.fingerprint.betw[[cluster]][['refMat']],
connectivity.fingerprint.betw[[cluster]][['querMat']],
"CSmfa",factor.plot=factor,which=c(2,3),
result.available=connectivity.fingerprint.betw[[cluster]][['MFA']],
plot.type='sweave')
return(mfa)
}
for (i in 1:length(n.cluster.fingerprint)){
print(paste('Query cluster is',i))
plot_MFA_fingerprint_between(i,1)
}
# Chunk 43
sapply(n.cluster.fingerprint, function(x) sapply(sapply(n.cluster.fingerprint, function(y) connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(z) mean(abs(z))))
# Chunk 44
redo_MFA_fingerprint_between = function(cluster,factor){
mfa <- CSanalysis(connectivity.fingerprint.betw[[cluster]][['refMat']],
connectivity.fingerprint.betw[[cluster]][['querMat']],
"CSmfa",factor.plot=factor,which=c(),
result.available=connectivity.fingerprint.betw[[cluster]][['MFA']],
plot.type='sweave')
return(mfa)
}
betw.avg.connectivity.finger.pc2 <- sapply(n.cluster.fingerprint, function(x) sapply(sapply(n.cluster.fingerprint, function(y) redo_MFA_fingerprint_between(x,2)@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(z) mean(abs(z))))
# ## Warning in .local(refMat, querMat, type, ...): CS, GS and CSRankScores Slot
## in CSresult will be overwritten due to different factor choice.
# Chunk 45
betw.avg.connectivity.finger.pc2
# Chunk 46: target_betw_MFA
connectivity.target.betw <- lapply(n.cluster.target, function(x) NULL)
ptm <- proc.time()
for (i in 1:length(connectivity.target.betw)) { # loop through clusters
connectivity.target.betw[[i]][['refMat']] <- geneMat[,cut.cluster.targetMat==i] # reference contains i'th cluster
connectivity.target.betw[[i]][['querMat']] <- geneMat[,cut.cluster.targetMat!=i] # query set contains all other clusters
connectivity.target.betw[[i]][['MFA']] <- CSanalysis(connectivity.target.betw[[i]][['refMat']],
connectivity.target.betw[[i]][['querMat']],
"CSmfa",which=c(),factor.plot=1) # MFA analysis
}
proc.time() - ptm
# Chunk 47
plot_MFA_target_between = function(cluster,factor){
# Plots result for already calculated MFA objects
mfa <- CSanalysis(connectivity.target.betw[[cluster]][['refMat']],
connectivity.target.betw[[cluster]][['querMat']],
"CSmfa",factor.plot=factor,which=c(2,3),
result.available=connectivity.target.betw[[cluster]][['MFA']],
plot.type='sweave')
return(mfa)
}
for (i in 1:length(n.cluster.target)){
print(paste('Query cluster is',i))
plot_MFA_target_between(i,1)
}
# Chunk 48
sapply(n.cluster.target, function(x) sapply(sapply(n.cluster.target, function(y) connectivity.target.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.targetMat==y]),]),function(z) mean(abs(z))))
# Chunk 49
redo_MFA_target_between = function(cluster,factor){
mfa <- CSanalysis(connectivity.target.betw[[cluster]][['refMat']],
connectivity.target.betw[[cluster]][['querMat']],
"CSmfa",factor.plot=factor,which=c(),
result.available=connectivity.target.betw[[cluster]][['MFA']],
plot.type='sweave')
return(mfa)
}
betw.avg.connectivity.target.pc2 <- sapply(n.cluster.target, function(x) sapply(sapply(n.cluster.target, function(y) redo_MFA_target_between(x,2)@CS$CS.query[colnames(geneMat[,cut.cluster.targetMat==y]),]),function(z) mean(abs(z))))
# ## Warning in .local(refMat, querMat, type, ...): CS, GS and CSRankScores Slot
## in CSresult will be overwritten due to different factor choice.
# Chunk 50
betw.avg.connectivity.target.pc2
