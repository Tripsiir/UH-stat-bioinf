factor1.out_MFA <-  CSanalysis(refMat, querMat,"CSmfa",which=c(1:7),factor.plot=1,plot.type=sweave)
factor1.out_MFA <-  CSanalysis(refMat, querMat,"CSmfa",which=c(1:7),factor.plot=1,plot.type=sweave)
```
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,cache = TRUE,error=TRUE)
set.seed(718453)
# Chunk 2
load("MCF7Data.RData")
fingerprintMat <- fingerprintMat*1 # convert logical matrix to binary integer matrix
head(fingerprintMat[,1:4])
# Chunk 3
tanimoto = function(m){
S = matrix(0,nrow=dim(m)[1],ncol=dim(m)[1])
m=as.matrix(m)
N.C=m %*% t(m)
N.A=m %*% (1-t(m))
N.B=(1-m) %*% t(m)
S=N.C/(N.A+N.B+N.C)
D = 1 - S
return(D)
}
dist.fingerprintMat <- tanimoto(fingerprintMat)
head(dist.fingerprintMat[,1:4])
# alternative in base r?
# test.dist.fingerprintMat <- as.matrix(dist(fingerprintMat,method = 'binary'))
# test.dist.fingerprintMat == dist.fingerprintMat
# Chunk 4
### Base R method:
# cluster.fingerprintMat <- hclust(as.dist(dist.fingerprintMat), method = "average")
# plot(cluster.fingerprintMat,main='Hierarchical clustering of compounds based on their chemical fingerprints',hang=-1,col = "#487AA1", col.main = "#F38630", col.lab = "#F38630", col.axis = "#7C8071",xlab="Compounds",sub="", lwd = 2)
# axis(side = 2, at = seq(0, 400, 100), col = "#F38630", labels = TRUE, lwd = 2)
library(cluster)
cluster.a.fingerprintMat <- agnes(as.dist(dist.fingerprintMat),method = "average")
# plot(cluster.a.fingerprintMat,which.plots = 2)
pltree(cluster.a.fingerprintMat,main='Hierarchical clustering of compounds based on their chemical fingerprints',col = "#487AA1", col.main = "#F38630", col.lab = "#F38630", col.axis = "#7C8071",xlab="Compounds",sub="", lwd = 2) # calls as.hclust plot method (,hang=-1)
axis(side = 2, at = seq(0, 400, 100), col = "#F38630", labels = TRUE, lwd = 2)
# Chunk 5
FUNcluster = function(x,k,inputcluster){
# Function that requires the original observations (x),
# the number of desired clusters (k),
# and a cluster object
out = list( cluster = cutree(inputcluster,k=k))
return(out)
}
gap <- clusGap(fingerprintMat,FUNcluster = FUNcluster,inputcluster=cluster.a.fingerprintMat,K.max = 20,B = 500)
plot(gap)
gapdata <- as.data.frame(gap$Tab)
maxSE(gapdata[,3],gapdata[,4],"Tibs2001SEmax")
# Chunk 7
cluster.fingerprintMat <- agnes(as.dist(dist.fingerprintMat),method = "flexible",par.method = 0.625)
pltree(cluster.fingerprintMat,main='Hierarchical clustering of compounds based on their chemical fingerprints',col = "#487AA1", col.main = "#F38630", col.lab = "#F38630", col.axis = "#7C8071",xlab="Compounds",sub="", lwd = 2) # calls as.hclust plot method
axis(side = 2, at = seq(0, 400, 100), col = "#F38630", labels = TRUE, lwd = 2)
gap <- clusGap(fingerprintMat,FUNcluster = FUNcluster,inputcluster=cluster.fingerprintMat,K.max = 20,B = 500)
plot(gap)
gapdata <- as.data.frame(gap$Tab)
maxSE(gapdata[,3],gapdata[,4],"Tibs2001SEmax")
# Chunk 8
pltree(cluster.fingerprintMat,main='Hierarchical clustering of compounds based on their chemical fingerprints',hang=-1,col = "#487AA1", col.main = "#F38630", col.lab = "#F38630", col.axis = "#7C8071",xlab="Compounds",sub="", lwd = 2) # calls as.hclust plot method
axis(side = 2, at = seq(0, 400, 100), col = "#F38630", labels = TRUE, lwd = 2)
rect.hclust(cluster.fingerprintMat,k=7)
# Chunk 9
# http://www.stat.berkeley.edu/~s133/Cluster2a.html
counts = sapply(2:15,function(ncl)table(cutree(cluster.fingerprintMat,ncl)))
names(counts) = 2:15
counts
# Chunk 10
dist.targetMat <- tanimoto(targetMat)
cluster.targetMat <- agnes(as.dist(dist.targetMat),method = "flexible",par.method = 0.625)
gap <- clusGap(targetMat,FUNcluster = FUNcluster,inputcluster=cluster.targetMat,K.max = 20,B = 500)
plot(gap)
gapdata <- as.data.frame(gap$Tab)
maxSE(gapdata[,3],gapdata[,4],"Tibs2001SEmax")
pltree(cluster.targetMat,main='Hierarchical clustering of compounds based on their target predictions',col = "#487AA1", col.main = "#F38630", col.lab = "#F38630", col.axis = "#7C8071",xlab="Compounds",sub="", lwd = 2) # calls as.hclust plot method
rect.hclust(cluster.targetMat,k=7)
# Chunk 11
library(CSFA)
cut.cluster.fingerprintMat <- cutree(cluster.fingerprintMat,k=7) # get vector with cluster membership for compounds
colnames(geneMat)[cut.cluster.fingerprintMat == 1]
# Chunk 12
refMat <- geneMat[,cut.cluster.fingerprintMat==1][,-c(1)]
querMat <- geneMat[,cut.cluster.fingerprintMat==1]
# Chunk 13
# MFA.fingerprint <- CSanalysis(refMat, querMat,"CSmfa",which = c(1:7))
factor1.out_MFA <-  CSanalysis(refMat, querMat,"CSmfa",which=c(1:7),factor.plot=1,plot.type=sweave)
# Chunk 14
factor1.out_MFA@CS$CS.query
# Chunk 15
factor2.out_MFA <-  CSanalysis(refMat, querMat,"CSmfa",which=c(),factor.plot=2)
factor2.out_MFA@CS$CS.query
# Chunk 16
factor1.out_MFA@CSRankScores
factor2.out_MFA@CSRankScores
# Chunk 17
# Loop framework to use later...
n.cluster <- unique(cut.cluster.fingerprintMat) # number of clusters
connectivity.fingerprint <- vector('list',length(n.cluster)) # initialize list to store connectivity scores
for (i in n.cluster) {
compounds.in.cluster <- rownames(fingerprintMat[cut.cluster.fingerprintMat==i,,drop=F])
connectivity.fingerprint[[i]] <- sapply( c('average',compounds.in.cluster), function(j) NULL)
connectivity.fingerprint[[i]][['compounds']] <- compounds.in.cluster
}
ptm <- proc.time()
for (i in 1:length(connectivity.fingerprint)) { # loop through clusters
sum <- 0
for (j in 1:length(connectivity.fingerprint[[i]]$compounds)) { # loop through compounds in a cluster
refMat <- geneMat[,connectivity.fingerprint[[i]]$compounds[-c(j)]]
querMat <- geneMat[,connectivity.fingerprint[[i]]$compounds]
connectivity.fingerprint[[i]][[connectivity.fingerprint[[i]]$compounds[[j]]]] <- CSanalysis(refMat,querMat,"CSmfa",which=c(),factor.plot=1)@CS$CS.query
sum <- sum + connectivity.fingerprint[[i]][[connectivity.fingerprint[[i]]$compounds[[j]]]][connectivity.fingerprint[[i]]$compounds[[j]],]
}
connectivity.fingerprint[[i]]$average <- sum/j
}
proc.time() - ptm
# Chunk 18
connectivity.fingerprint
# Chunk 19
plot(sapply(connectivity.fingerprint, function(x) x$average),xlab='Cluster',ylab='Average connectivity score')
# Chunk 20
colnames(geneMat)[cut.cluster.fingerprintMat == 7]
# Chunk 21
# Loop framework to use later...
cut.cluster.targetMat <- cutree(cluster.targetMat,k=7)
n.cluster.pred <- unique(cut.cluster.targetMat) # number of clusters
connectivity.pred <- vector('list',length(n.cluster.pred)) # initialize list to store connectivity scores
for (i in n.cluster.pred) {
compounds.in.cluster.pred <- rownames(targetMat[cut.cluster.targetMat==i,,drop=F])
connectivity.pred[[i]] <- sapply( c('average',compounds.in.cluster.pred), function(j) NULL)
connectivity.pred[[i]][['compounds']] <- compounds.in.cluster.pred
}
ptm <- proc.time()
for (i in 1:length(connectivity.pred)) { # loop through clusters
sum <- 0
for (j in 1:length(connectivity.pred[[i]]$compounds)) { # loop through compounds in a cluster
refMat <- geneMat[,connectivity.pred[[i]]$compounds[-c(j)]]
querMat <- geneMat[,connectivity.pred[[i]]$compounds]
connectivity.pred[[i]][[connectivity.pred[[i]]$compounds[[j]]]] <- CSanalysis(refMat,querMat,"CSmfa",which=c(),factor.plot=1)@CS$CS.query
sum <- sum + connectivity.pred[[i]][[connectivity.pred[[i]]$compounds[[j]]]][connectivity.pred[[i]]$compounds[[j]],]
}
connectivity.pred[[i]]$average <- sum/j
}
proc.time() - ptm
# Chunk 22
connectivity.pred
plot(sapply(connectivity.pred, function(x) x$average),xlab='Cluster',ylab='Average connectivity score based on target prediction')
# Chunk 23
# Loop framework to use later...
ptm <- proc.time()
for (i in 1:length(connectivity.fingerprint)) { # loop through clusters
refMat <- geneMat[,connectivity.fingerprint[[i]]$compounds]
querMat <- geneMat[,!colnames(geneMat) %in% connectivity.fingerprint[[i]]$compounds ]
# MFA <- CSanalysis(refMat,querMat,"CSmfa",which=c(),factor.plot=1)
# connectivity.fingerprint[[i]][['clusterscore']]
}
proc.time() - ptm
connectivity.pred
load("D:/github/UH-stat-bioinf/connectivity-scores/.RData")
save.image("D:/github/UH-stat-bioinf/connectivity-scores/test.RData")
