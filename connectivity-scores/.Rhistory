aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point() +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor)) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(labels=c('Reference','Leave-one-out compound'))
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point() +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor)) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference','Leave-one-out compound'))
colour.factor = rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query) == "verapamil"
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor)) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference','Leave-one-out compound'))
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference','Leave-one-out compound'))
colour.factor = rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query) == "verapamil"
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference','Leave-one-out compound')) +
scale_x_continuous(name="") +  scale_y_continuous(name="Weight (Kg)")
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference','Leave-one-out compound')) +
scale_x_discrete(name="") +  scale_y_continuous(name="Weight (Kg)")
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference','Leave-one-out compound')) +
scale_x_discrete(name="") +  scale_y_continuous(name="Weight (Kg)")
colour.factor = rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query) == "verapamil"
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference','Leave-one-out compound')) +
scale_x_continuous(name="") +  scale_y_continuous(name="Weight (Kg)")
t<-CSanalysis(connectivity.target[[3]][[nam[1]]][['refMat']],connectivity.target[[3]][[nam[1]]][['querMat']],
"CSmfa",factor.plot=1,which=c(5),result.available=connectivity.target[[3]][[nam[1]]][['MFA']],
plot.type='sweave')
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_discrete(limits=c(0,60),name="Compound Index") +  scale_y_continuous(name="Compound Loadings")
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(name="Compound Index") +  scale_y_continuous(name="Compound Loadings")
seq_along(Factor1)
seq_along(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query$Factor1)
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq(1,length(Factor1)),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(name="Compound Index") +  scale_y_continuous(name="Compound Loadings")
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=as.factor(seq_along(Factor1)),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(name="Compound Index") +  scale_y_continuous(name="Compound Loadings")
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query)))
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_discrete(limits=seq_along(Factor1),name="Compound Index") +  scale_y_continuous(name="Compound Loadings")
rep(1,9)
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_discrete(limits=c(rep(1,9)),name="Compound Index") +  scale_y_continuous(name="Compound Loadings")
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(name="Compound Index") +  scale_y_continuous(name="Compound Loadings")
seq_along(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query$Factor1)
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_discrete(name="Compound Index") +  scale_y_continuous(name="Compound Loadings")
library(scales)
colour.factor = rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query) == "verapamil"
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(breaks=pretty_breaks(),name="Compound Index") +  scale_y_continuous(name="Compound Loadings")
seq_along(connectivity.fingerprint)
seq_along(connectivity.target[[3]])
sapply(seq_along(connectivity.target[[3]]), function(x,n) connectivity.target[[3]][[x]][['MFA']]@CS$CS.query[n[x],],n=names(connectivity.target[[3]]))
sapply(sapply(connectivity.fingerprint, function(y) sapply(seq_along(y), function(x,n) y[[x]][['MFA']]@CS$CS.query[n[x],] ,n=names(y))), function(z) mean(abs(z)))
sapply(sapply(seq_along(connectivity.fingerprint),
function(y) sapply(seq_along(connectivity.fingerprint[[y]]),
function(x,n) redo_MFA_fingerprint_within(y,n[x],2)@CS$CS.query[n[x],] ,
n=names(connectivity.fingerprint[[y]]))), function(z) mean(abs(z)))
sapply(sapply(connectivity.fingerprint, function(y) sapply(seq_along(y), function(x,n) y[[x]][['MFA']]@CS$CS.query[n[x],] ,n=names(y))), function(z) mean(abs(z)))
sapply(sapply(seq_along(connectivity.fingerprint),
function(y) sapply(seq_along(connectivity.fingerprint[[y]]),
function(x,n) redo_MFA_fingerprint_within(y,n[x],1)@CS$CS.query[n[x],] ,
n=names(connectivity.fingerprint[[y]]))), function(z) mean(abs(z)))
sapply(sapply(connectivity.fingerprint, function(y) sapply(seq_along(y), function(x,n) y[[x]][['MFA']]@CS$CS.query[n[x],] ,n=names(y))), function(z) mean(abs(z)))
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(breaks=pretty_breaks(),name="Compound Index") +
scale_y_continuous(name="Compound Loadings") +
ggtitle("Cluster "+paste(3))
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(breaks=pretty_breaks(),name="Compound Index") +
scale_y_continuous(name="Compound Loadings") +
ggtitle("Cluster ",paste(3))
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(breaks=pretty_breaks(),name="Compound Index") +
scale_y_continuous(name="Compound Loadings") +
ggtitle("Cluster "paste(3))
rownames(connectivity.target[[3]]
)
rownames(connectivity.target[[3]])
rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query)
rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query)[1]
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(breaks=pretty_breaks(),name="Compound Index") +
scale_y_continuous(name="Compound Loadings") +
ggtitle(paste("Cluster ",rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query)[1]))
colour.factor = rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query) == "verapamil"
ggplot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query,
aes(x=seq_along(Factor1),y=Factor1,label=rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
# guides(colour=guide_legend(title=NULL)) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(breaks=pretty_breaks(),name="Compound Index") +
scale_y_continuous(name="Compound Loadings") +
ggtitle(paste("Cluster",3,"- Left out compound",rownames(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query)[1]))
nam
cluster.targetMat
rownames(fingerprintMat[cut.cluster.fingerprintMat==i,,drop=F])
rownames(fingerprintMat[cut.cluster.fingerprintMat==3,,drop=F])
rownames(cut.cluster.targetMat[cut.cluster.targetMat==3,,drop=F])
rownames(cut.cluster.targetMat[cut.cluster.targetMat==3,,drop=F])
cut.cluster.targetMat
rownames(targetMat[cut.cluster.targetMat==3,,drop=F])
compound.names <- rownames(targetMat[cut.cluster.targetMat==3,,drop=F])
for (i in 1:length(compound.names)){
mfa <- CSanalysis(connectivity.target[[3]][[i]][['refMat']],
connectivity.target[[3]][[i]][['querMat']],
"CSmfa",factor.plot=1,which=c(),
result.available=connectivity.target[[3]][[i]][['MFA']])
colour.factor <- rownames(mfa@CS$CS.query) == compound.names[i]
ggplot(mfa@CS$CS.query,aes(x=seq_along(Factor1),y=Factor1,
label=rownames(mfa@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(breaks=pretty_breaks(),name="Compound Index") +
scale_y_continuous(name="Compound Loadings") +
ggtitle(paste("Cluster",3,"- Left out compound",compound.names[i]))
}
compound.names <- rownames(targetMat[cut.cluster.targetMat==3,,drop=F])
for (i in 1:length(compound.names)){
mfa <- CSanalysis(connectivity.target[[3]][[i]][['refMat']],
connectivity.target[[3]][[i]][['querMat']],
"CSmfa",factor.plot=1,which=c(),
result.available=connectivity.target[[3]][[i]][['MFA']])
colour.factor <- rownames(mfa@CS$CS.query) == compound.names[i]
print(ggplot(mfa@CS$CS.query,aes(x=seq_along(Factor1),y=Factor1,
label=rownames(mfa@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(breaks=pretty_breaks(),name="Compound Index") +
scale_y_continuous(name="Compound Loadings") +
ggtitle(paste("Cluster",3,"- Left out compound",compound.names[i])))
}
plot(connectivity.target[[3]][[nam[1]]][['MFA']]@CS$CS.query$Factor1)
t<-CSanalysis(connectivity.target[[3]][[nam[1]]][['refMat']],connectivity.target[[3]][[nam[1]]][['querMat']],
"CSmfa",factor.plot=1,which=c(3),result.available=connectivity.target[[3]][[nam[1]]][['MFA']],
plot.type='sweave')
t<-CSanalysis(connectivity.target[[3]][[nam[1]]][['refMat']],connectivity.target[[3]][[nam[1]]][['querMat']],
"CSmfa",factor.plot=1,which=c(2),result.available=connectivity.target[[3]][[nam[1]]][['MFA']],
plot.type='sweave')
t<-CSanalysis(connectivity.target[[3]][[nam[1]]][['refMat']],connectivity.target[[3]][[nam[1]]][['querMat']],
"CSmfa",factor.plot=1,which=c(4),result.available=connectivity.target[[3]][[nam[1]]][['MFA']],
plot.type='sweave')
betw.finger.factor1.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(2,3),factor.plot=1,plot.type='sweave')
betw.finger.factor1.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(2,3),factor.plot=1,plot.type='sweave')
refMat <- geneMat[,cut.cluster.fingerprintMat==1]
querMat <- geneMat[,cut.cluster.fingerprintMat!=1]
colnames(refMat)
colnames(querMat)
betw.finger.factor1.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(2,3),factor.plot=1,plot.type='sweave')
refMat <- geneMat[,cut.cluster.targetMat==3]
querMat <- geneMat[,cut.cluster.targetMat!=3]
betw.finger.factor1.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(2,3),factor.plot=1,plot.type='sweave')
betw.finger.factor1.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(5),factor.plot=1,plot.type='sweave')
refMat <- geneMat[,cut.cluster.fingerprintMat==1]
querMat <- geneMat[,cut.cluster.fingerprintMat!=1]
colnames(refMat)
colnames(querMat)
betw.finger.factor1.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(2,3),factor.plot=1,plot.type='sweave')
library(scales)
library(ggplot2)
compound.names <- rownames(targetMat[cut.cluster.targetMat==3,,drop=F])
for (i in 1:length(compound.names)){
mfa <- CSanalysis(connectivity.target[[3]][[i]][['refMat']],
connectivity.target[[3]][[i]][['querMat']],
"CSmfa",factor.plot=1,which=c(),
result.available=connectivity.target[[3]][[i]][['MFA']])
colour.factor <- rownames(mfa@CS$CS.query) == compound.names[i]
print(ggplot(mfa@CS$CS.query,aes(x=seq_along(Factor1),y=Factor1,
label=rownames(mfa@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(breaks=pretty_breaks(),name="Compound Index") +
scale_y_continuous(name="Compound Loadings - Factor 1") +
ggtitle(paste("Cluster",3,"- Left out compound",compound.names[i])))
}
library(CSFA)
library(scales)
library(ggplot2)
compound.names <- rownames(targetMat[cut.cluster.targetMat==3,,drop=F])
for (i in 1:length(compound.names)){
mfa <- CSanalysis(connectivity.target[[3]][[i]][['refMat']],
connectivity.target[[3]][[i]][['querMat']],
"CSmfa",factor.plot=1,which=c(),
result.available=connectivity.target[[3]][[i]][['MFA']])
colour.factor <- rownames(mfa@CS$CS.query) == compound.names[i]
print(ggplot(mfa@CS$CS.query,aes(x=seq_along(Factor1),y=Factor1,
label=rownames(mfa@CS$CS.query))) +
geom_point(aes(colour=colour.factor)) +
geom_text(vjust="inward",hjust="inward",#nudge_y = -0.01,
aes(colour=colour.factor),show.legend = F) +
scale_colour_discrete(name=NULL,labels=c('Reference compound','Leave-one-out compound')) +
scale_x_continuous(breaks=pretty_breaks(),name="Compound Index") +
scale_y_continuous(name="Compound Loadings - Factor 1") +
ggtitle(paste("Cluster",3,"- Left out compound",compound.names[i])))
}
refMat <- geneMat[,cut.cluster.fingerprintMat==7]
querMat <- geneMat[,cut.cluster.fingerprintMat!=7]
colnames(refMat)
colnames(querMat)
betw.finger.factor1.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(2,3),factor.plot=1,plot.type='sweave')
CSanalysis(connectivity.target[[3]][[nam[1]]][['refMat']],connectivity.target[[3]][[nam[1]]][['querMat']],
#            "CSmfa",factor.plot=1,which=c(1,2,3,4,5,6),result.available=connectivity.target[[3]][[nam[1]]][['MFA']],
#            plot.type='sweave')
t<-CSanalysis(connectivity.target[[3]][[nam[1]]][['refMat']],connectivity.target[[3]][[nam[1]]][['querMat']],
"CSmfa",factor.plot=1,which=c(1,2,3,4,5,6),result.available=connectivity.target[[3]][[nam[1]]][['MFA']],
plot.type='sweave')
library(CSFA)
t<-CSanalysis(connectivity.target[[3]][[nam[1]]][['refMat']],connectivity.target[[3]][[nam[1]]][['querMat']],
"CSmfa",factor.plot=1,which=c(1,2,3,4,5,6),result.available=connectivity.target[[3]][[nam[1]]][['MFA']],
plot.type='sweave')
t<-CSanalysis(connectivity.target[[3]][[nam[1]]][['refMat']],connectivity.target[[3]][[nam[1]]][['querMat']],
"CSmfa",factor.plot=1,which=c(1,2,3,4,5),result.available=connectivity.target[[3]][[nam[1]]][['MFA']],
plot.type='sweave')
?`CSanalysis,matrix,matrix,CSsmfa-method`
refMat <- geneMat[,cut.cluster.fingerprintMat==7]
querMat <- geneMat[,cut.cluster.fingerprintMat!=7]
colnames(refMat)
colnames(querMat)
betw.finger.factor1.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(2,3),factor.plot=1,plot.type='sweave')
betw.finger.factor1.demo[['refMat']]
CSanalysis(refMat,querMat,"CSmfa",factor.plot=2,which=c(6),
result.available=betw.finger.factor1.demo)
CSanalysis(refMat,querMat,"CSmfa",factor.plot=2,which=c(4),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(4),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(1),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(2),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(3),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(4),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=2,which=c(4),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(5),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(2),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(3),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(2),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(6),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(7),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(3),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(5),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(2),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(3),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(4),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(5),
result.available=betw.finger.factor1.demo,plot.type='sweave')
sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])
betw.finger.factor1.demo@CS$CS.query
geneMat[,cut.cluster.fingerprintMat==y])
geneMat[,cut.cluster.fingerprintMat==y]
n.cluster.fingerprint
sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])
colnames(geneMat[,cut.cluster.fingerprintMat==6])
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
```
connectivity.fingerprint.betw
plot_MFA_fingerprint_between = function(cluster,factor){
# Plots result for already calculated MFA objects
mfa <- CSanalysis(connectivity.fingerprint.betw[[cluster]][['refMat']],
connectivity.fingerprint.betw[[cluster]][['querMat']],
"CSmfa",factor.plot=factor,which=c(2,3),
result.available=connectivity.fingerprint.betw[[cluster]][['MFA']],
plot.type='sweave')
return(mfa)
}
for (i in 1:length(n.cluster.fingerprint)){
print(paste('Reference cluster is',i))
plot_MFA_fingerprint_between(i,1)
}
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(5),
result.available=betw.finger.factor1.demo,plot.type='sweave')
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(4),
result.available=betw.finger.factor1.demo,plot.type='sweave')
betw.finger.factor2.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(),factor.plot=2,plot.type='sweave')
sapply(n.cluster.fingerprint, function(y) betw.finger.factor2.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])
```
betw.finger.factor2.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(),factor.plot=2,plot.type='sweave')
sapply(n.cluster.fingerprint, function(y) betw.finger.factor2.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor2.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
CSanalysis(refMat,querMat,"CSmfa",factor.plot=2,which=c(4),
result.available=betw.finger.factor2.demo,plot.type='sweave')
warnings()
CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(5),
result.available=betw.finger.factor1.demo,plot.type='sweave')
n.cluster.fingerprint
n.cluster.fingerprint
y
y=1
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y])
,]
x=1
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]
x=7
x=7
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]
sapply(n.cluster.fingerprint, function(x)
sapply(
sapply(n.cluster.fingerprint, function(y)
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),
function(z) mean(abs(z))))
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])
sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])[1]
mean(abs(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])[1]))
sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])[1]
abs(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]))
mean(0.453,01768,0.13168,0.12366,0.3552)
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
y
betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]
sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])[[1]]
sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])[1]
sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])[[1]]
abs(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])[[1]])
mean(abs(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])[[1]]))
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
sapply(n.cluster.fingerprint, function(x)
sapply(
sapply(n.cluster.fingerprint, function(y)
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),
function(z) mean(abs(z))))
av.betw <- sapply(n.cluster.fingerprint, function(x)
sapply(
sapply(n.cluster.fingerprint, function(y)
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),
function(z) mean(abs(z))))
dimnames(av.betw) <- c('Reference','Query')
dimnames(av.betw) <- list('Reference','Query')
av.betw <- sapply(n.cluster.fingerprint, function(x)
sapply(
sapply(n.cluster.fingerprint, function(y)
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),
function(z) mean(abs(z))))
sapply(n.cluster.fingerprint, function(x)
sapply(
sapply(n.cluster.fingerprint, function(y)
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),
function(z) mean(abs(z))))
refMat <- geneMat[,cut.cluster.fingerprintMat==7]
querMat <- geneMat[,cut.cluster.fingerprintMat!=7]
colnames(refMat)
colnames(querMat)
betw.finger.factor1.demo <-  CSanalysis(refMat, querMat,"CSmfa",which=c(2,3),factor.plot=1,plot.type='sweave')
sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),])
loadings <- CSanalysis(refMat,querMat,"CSmfa",factor.plot=1,which=c(5),
result.available=betw.finger.factor1.demo,plot.type='sweave')
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
sapply(n.cluster.fingerprint, function(x)
sapply(
sapply(n.cluster.fingerprint, function(y)
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),
function(z) mean(abs(z))))
rm(y)
rm(x)
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
sapply(n.cluster.fingerprint, function(x)
sapply(
sapply(n.cluster.fingerprint, function(y)
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),
function(z) mean(abs(z))))
sapply(sapply(n.cluster.fingerprint, function(y) betw.finger.factor1.demo@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),function(x) mean(abs(x)))
sapply(n.cluster.fingerprint, function(x)
sapply(
sapply(n.cluster.fingerprint, function(y)
connectivity.fingerprint.betw[[x]][['MFA']]@CS$CS.query[colnames(geneMat[,cut.cluster.fingerprintMat==y]),]),
function(z) mean(abs(z))))
